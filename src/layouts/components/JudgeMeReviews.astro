---
import ReviewComment from "./reviews/reviewComment";

interface Props {
  productId: string;
  shopDomain: string;
  apiToken: string;
  limit?: number;
}

const { productId, shopDomain, apiToken, limit = 5 } = Astro.props;

// Fetch reviews from Judge.me API
const fetchJudgeMeReviews = async () => {
  try {
    // Add debugging to see exactly what we're passing
    console.log("Fetching reviews with params:", { shopDomain, productId, limit });
    
    // Extract numeric ID if productId is in the gid format
    const numericProductId = productId.includes("gid://shopify/Product/") 
      ? productId.replace("gid://shopify/Product/", "") 
      : productId;
    
    const apiUrl = `https://judge.me/api/v1/reviews?api_token=${apiToken}&shop_domain=${shopDomain}&external_product_id=${numericProductId}&per_page=${limit}`;
    console.log("API URL:", apiUrl);
    
    const response = await fetch(apiUrl);
    
    console.log("Response status:", response.status);
    
    if (!response.ok) {
      throw new Error(`Failed to fetch reviews: ${response.status}`);
    }
    
    const data = await response.json();
    console.log("API response data:", data);
    
    // Check if the response contains reviews
    if (!data.reviews || !Array.isArray(data.reviews)) {
      console.warn("No reviews array in response:", data);
      return [];
    }
    
    return data.reviews;
  } catch (error) {
    console.error("Error fetching JudgeMe reviews:", error);
    return [];
  }
};

// Transform reviews - simplified filter logic
const transformReviews = (reviews: any[]) => {
  console.log("Transforming reviews:", reviews.length);
  
  // Skip additional filtering by product ID since we're already fetching by product ID
  return reviews
    .filter(({ rating }) => rating > 3)
    .map(({ pictures, reviewer, created_at, rating, body }) => ({
      avatar: pictures?.[0]?.urls?.original || "/default-avatar.png",
      name: reviewer?.name || "Anonymous",
      date: new Date(created_at).toLocaleDateString(),
      rating: rating ?? 0,
      comment: body ?? "",
    }));
};

const judgeMeReviews = await fetchJudgeMeReviews();
console.log(`Got ${judgeMeReviews.length} reviews from API`);
const reviews = transformReviews(judgeMeReviews);
console.log(`After transformation: ${reviews.length} reviews remaining`);
---

<div class="container mx-auto px-4 py-8 mb-12">
  <h2 class="text-4xl font-bold mb-6">Customer Reviews</h2>
  {
    reviews.length > 0 ? (
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {reviews.map((review) => (
          <ReviewComment
            review={{
              name: review.name,
              date: review.date,
              rating: review.rating,
              comment: review.comment,
            }}
          />
        ))}
      </div>
    ) : (
      <p class="text-gray-500">No reviews yet for this product.</p>
    )
  }
</div>